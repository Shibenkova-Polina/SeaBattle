@startuml
skinparam classAttributeIconSize 0

class ActionListenerExit {
  + actionPerformed(ActionEvent): void
}
class ActionListenerNewGame {
  - lastGame: Thread
  + actionPerformed(ActionEvent): void
}
class ActionListenerNewGameSwitch {
  - cardLayout: CardLayout
  - panelNameToSwitchTo: String
  - container: Container
  - lastGame: Thread
  + actionPerformed(ActionEvent): void
}
class ActionListenerPreviousGameSwitch {
  - container: Container
  ~ arrangementOfShips: ArrangementOfShips
  - cardLayout: CardLayout
  - panelNameToSwitchTo: String
  ~ myDataBase: MyDataBase
  - resumeFieldHuman(Field): void
  - resumeFieldComputer(Field): void
  - setCellCtate(Field, Map<String, String>): void
  + actionPerformed(ActionEvent): void
}
class ActionListenerSwitch {
  - container: Container
  - id: int
  - cardLayout: CardLayout
  - panelNameToSwitchTo: String
  ~ dbPersistence: DBPersistence
  + actionPerformed(ActionEvent): void
  - fillDB(Field, boolean): void
}
class ArrangementOfShips {
  - instance: ArrangementOfShips
  - placementField: Cell[][]
  - idPlacements: int
  + createShip(int, int, int, Orientation): void
  + getIdPlacements(): int
  + createPrevShips(Field, String[]): void
  - validPlace(int, int, int, Orientation): boolean
  + setIdPlacements(int): void
  + getInstance(): ArrangementOfShips
  + setPlacementField(Cell[][]): void
  + createShips(Field): void
}
class Cell {
  - xCoord: int
  - yCoord: int
  - ship: Ship
  - state: CellState
  + getXCoord(): int
  + setShip(Ship): void
  + equals(Object): boolean
  + inititalizeState(CellState): void
  + setState(CellState): void
  + getState(): CellState
  - conditionOfShip(): boolean
  + isShip(): boolean
  + getShot(): void
  + getYCoord(): int
}
enum CellState << enumeration >> {
  + MISS
  + INJURE
  + SHIP
  + SEA
  + KILL
  + values(): CellState[]
  + valueOf(String): CellState
}
class Computer {
  - instance: Computer
  - enemyCells: Cell[][]
  - currentAims: ArrayList<Integer>
  - aimsCalculated: boolean
  - rightAims: ArrayList<Integer>
  - shootToPotentialAims: boolean
  - upAims: ArrayList<Integer>
  - downAims: ArrayList<Integer>
  - lastX: int
  - leftAims: ArrayList<Integer>
  - creationBD: boolean
  - shipsToKill: int
  - lastY: int
  + setCreationBD(boolean): void
  + newGame(): void
  + getNextCoordinates(): int[]
  + getEnemyCells(): Cell[][]
  - getRandomCoordinates(): int[]
  + getInstance(): Computer
  + setLastY(int): void
  + calculateAims(): void
  + setShipsToKill(int): void
  - clearAims(): void
  + getLeftAims(): ArrayList<Integer>
  + markKilled(int, int): void
  - setEnemyField(): void
  + getCreationBD(): boolean
  + setLastX(int): void
  + getRightAims(): ArrayList<Integer>
  - getCoordinates(): int[]
  - afterShot(int, int): void
  + getUpAims(): ArrayList<Integer>
  + getDownAims(): ArrayList<Integer>
  + getShipsToKill(): int
  + shoot(): void
}
class DBPersistence {
  - db: MyDataBase
  + createCells(int, String, StringBuilder, int, int): void
  + createShips(int, String, int, int, int, String): void
}
class DatabaseProperties {
  + getUrl(): String
  + getLogin(): String
  + getPassword(): String
}
class Field {
  - cells: Cell[][]
  + getCells(): Cell[][]
  + setCells(Cell[][]): void
  + resetCells(): void
}
class Game {
  - human: Human
  - lastGame: Thread
  - computer: Computer
  - instance: Game
  - newGame: boolean
  + playGame(): void
  + setNewGame(boolean): void
  + getLastGame(): Thread
  + getComputer(): Computer
  + getHuman(): Human
  + getNewGame(): boolean
  + getInstance(): Game
}
class GameInterface {
  ~ game: Game
  - instance: GameInterface
  - textLabel: JLabel
  - picture: ImageIcon
  - injure: ImageIcon
  - panelStart: JPanel
  - computerField: JPanel
  - buttonPanel: JPanel
  - sea: ImageIcon
  - buttonAlignment: JPanel
  - cardPanel: JPanel
  - ship: ImageIcon
  - cardLayout: CardLayout
  - miss: ImageIcon
  - humanField: JPanel
  - gamePanel: JPanel
  - kill: ImageIcon
  - constraints: GridBagConstraints
  + setTextLabel(String): void
  - updateField(Field, boolean): void
  + getInstance(): GameInterface
  - initializeFields(): void
  - updateHumanCell(Cell): void
  - initializeField(JPanel, Field): void
  + draw(): void
  - updateComputerCell(Cell): void
}
class Human {
  - shipsToKill: int
  - instance: Human
  + setShipsToKill(int): void
  + actionPerformed(ActionEvent): void
  + getShipsToKill(): int
  + getInstance(): Human
  + setOpponent(Player): void
  + newGame(): void
  - shoot(int, int): void
  - afterShot(): void
  + setActionListnerToCells(): void
}
class Main {
  + main(String[]): void
}
class Messages {
  - gameInterface: GameInterface
  - instance: Messages
  + getInstance(): Messages
  + getStartMessage(): void
  + getWinMessage(boolean): void
  + getMessage(boolean, ShootResult): void
}
class MyDataBase {
  - instanse: MyDataBase
  - properties: DatabaseProperties
  + getHumanShips(): String[]
  - connectShips(String, String[]): void
  + getComputerCells(): Map<String, String>
  + execute(String): void
  - conectCells(String, Map<String, String>): void
  - createShips(): void
  - connect(): Connection
  - init(): void
  + clearCells(): void
  + getInstance(): MyDataBase
  + getComputerShips(): String[]
  + getHumanCells(): Map<String, String>
  - createCells(): void
  + clearShips(): void
}
class Player {
  + myTurn: boolean
  + shootResult: ShootResult
  + opponent: Player
  + NUMBER_OF_PLAYER_SHIPS: int
  - field: Field
  + newGame(): void
  + getShot(int, int): ShootResult
  + getField(): Field
  + setOpponent(Player): void
  + moves(): boolean
  + switchPlayers(): void
}
class PropertiesFactory {
  - properties: DatabaseProperties
  - init(): void
  + getProperties(): DatabaseProperties
}
class Run {
  - SLEEP_TIME: int
  + run(): void
}
class Ship {
  - borders: ArrayList<Cell>
  - cells: ArrayList<Cell>
  + setBorders(ArrayList<Cell>): void
  + getCells(): ArrayList<Cell>
  + sink(): void
  + setCells(ArrayList<Cell>): void
}
enum ShootResult << enumeration >> {
  + INJURE
  + KILL
  + MISS
  + values(): ShootResult[]
  + valueOf(String): ShootResult
}

Game <.. Main
Human --|> Player
Computer --|> Player
Game *-- Computer
Game *-- Human

Messages *-- GameInterface
GameInterface  ..>  ActionListenerExit
GameInterface  ..>  ActionListenerNewGame
GameInterface  ..>  ActionListenerNewGameSwitch
GameInterface  ..>  ActionListenerPreviousGameSwitch
GameInterface  ..>  ActionListenerSwitch

Player *-- ShootResult
Player *-- Field
Field *-- Cell
Cell *-- CellState
Cell --> Ship

Computer --> Cell

ArrangementOfShips ..> Ship
ArrangementOfShips *-- Cell

PropertiesFactory *-- DatabaseProperties
MyDataBase *-- DatabaseProperties
DBPersistence *-- MyDataBase
ActionListenerPreviousGameSwitch *-- MyDataBase
ActionListenerSwitch *-- DBPersistence
DBPersistence <.. ArrangementOfShips

ActionListenerNewGame ..> Run
ActionListenerNewGameSwitch ..> Run
Game ..> Run

ActionListenerPreviousGameSwitch --> ArrangementOfShips
@enduml
